# -*- coding: utf-8 -*-
"""pj-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JdAhgdXC_sVvv4PBZrF_YssgjBWSERZO
"""

!pip install nltk
!pip install tqdm
!pip install pandas
!pip install googletrans
!pip install transformers

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from googletrans import Translator


plt.style.use('ggplot')

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

df = pd.read_csv('amazon.csv')
print(df.shape)
df=df.head(500)
print(df.shape)

df.head()

ax = df['overall'].value_counts().sort_index()
ax.plot(kind='bar',
          title='Count of Reviews by Stars',
          figsize=(10, 5))
plt.xlabel('Review Stars')
plt.show()

example = df['reviewText'][1]
print(example)

def Trans(reviewText,source):
  translator=Translator
  translation=translator.translate(reviewText,src=np.source,dest='en')
  return translation.reviewText

tokens = nltk.word_tokenize(example)
tokens[:10]

tagged = nltk.pos_tag(tokens)
tagged[:10]

entities = nltk.chunk.ne_chunk(tagged)
entities.pprint

import nltk
from tqdm.notebook import tqdm
from nltk.sentiment.vader import SentimentIntensityAnalyzer


nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()
scores = sia.polarity_scores(' very good product, if you like bad results')
print(scores)

scores = sia.polarity_scores(example)
print(scores)

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = str(row['reviewText'])
    myid = int( row['Unnamed: 0'])
    res[myid] = sia.polarity_scores(text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Unnamed: 0'})
vaders = vaders.merge(df, how='left')

vaders.head()

ax = sns.barplot( x='overall', y='compound', data = vaders)
ax.set_title('Compund Score by Amazon Star Review')
plt.show()

fig , axs = plt.subplots(1,3,figsize=(12,3))
sns.barplot(data=vaders,x='overall',y='pos',ax=axs[0])
sns.barplot(data=vaders,x='overall',y='neu',ax=axs[1])
sns.barplot(data=vaders,x='overall',y='neg',ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

print(example)
sia.polarity_scores(example)

encoded_text = tokenizer(example, return_tensors='pt')
output = model(**encoded_text)
overall = output[0][0].detach().numpy()
overall = softmax(overall)
scores_dict = {
    'roberta_neg' : overall[0],
    'roberta_neu' : overall[1],
    'roberta_pos' : overall[2]
}
print(scores_dict)

def polarity_scores_roberta(example):
    encoded_text = tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    overall = output[0][0].detach().numpy()
    overall = softmax(overall)
    scores_dict = {
        'roberta_neg' : overall[0],
        'roberta_neu' : overall[1],
        'roberta_pos' : overall[2]
    }
    return scores_dict

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    try:
        text = str(row['reviewText'])
        myid = int(row['Unnamed: 0'])
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[myid] = both
    except RuntimeError:
        print(f'Broke for id {myid}')

results_df = pd.DataFrame(res).T
results_df =results_df.reset_index().rename(columns={'index': 'Unnamed: 0'})
results_df = results_df.merge(df, how='left')

results_df.columns

results_df.head()

sns.pairplot(data=results_df,
             vars=['vader_neg','vader_pos','vader_neu','roberta_neg','roberta_neu','roberta_pos'],
             hue='overall',palette='tab10')
plt.show()

results_df.query('overall == 1') \
    .sort_values('roberta_pos', ascending=False)['reviewText'].values[0]

results_df.query('overall == 1') \
    .sort_values('vader_pos', ascending=False)['reviewText'].values[0]

results_df.query('overall == 5') \
    .sort_values('roberta_neg', ascending=False)['reviewText'].values[0]

results_df.query('overall == 5') \
    .sort_values('vader_neg', ascending=False)['reviewText'].values[0]

from transformers import pipeline
sent_pipeline=pipeline("sentiment-analysis")

sent_pipeline('i hate being rude')

sent_pipeline('i love you')

sent_pipeline('fate')

sent_pipeline('i am')